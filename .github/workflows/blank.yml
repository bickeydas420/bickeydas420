# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
// Where to put the globe?

var container = document.getElementById( "container! );

// Make the globe.

var globe= new DAT.Globe ( container ):

// We're going to ask a file for the JSON data. var xhr = new XMLHttpRequest():

Where do we get the data? xhr.open( 'GET', 'myjson.json', true );

// What do we do when we have it?

xhr.onreadystatechange = function() {

// If we've received the data if (xhr.readyState === 4 && xhr.status 200) {

Parse the JSON

var data = JSON.parse( xhr.responseText );

Tell the globe about your JSON data for (var 1 = 0; i <data.length; i++) { globe.addData(data[i][1], (format: 'magnitude', name: data[i][0]} );

}

// Create the geometry globe.createPoints();

Begin animation globe.animate();

};

Begin request xhr.send( null);
